
"----------Split Mapping------"
set splitbelow
set splitright

nmap <C-j> <C-W><C-J> " Move to bottom window
nmap <C-k> <C-W><C-K> " Move to top window
nmap <C-h> <C-W><C-H> " Move to left window
nmap <C-l> <C-W><C-L> " Move to right window

nnoremap <silent> + :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> - :exe "resize " . (winheight(0) * 2/3)<CR>
"----------Mapping------"

"Make it easy to edit vimrc file.
nmap <Leader>ev :tabedit $MYVIMRC<cr>

"Make NERDTree easier to toggle
nmap <C-b> :NERDTreeToggle<cr>
let NERDTreeShowHidden=1

"Make ctrl+s work
nmap <c-s> :w<cr>
imap <c-s> <esc>:w<cr>a


"----------Plugins------"

"/
"/ CtrlP
"/
let g:ctrlp_custom_ignore = 'node_modules\|git'
let g:ctrlp_match_window = 'top,order:ttb,min:1,max30,results:30'
let g:ctrlp_show_hidden = 1
let g:ctrlp_working_path_mode = 'ra'

"search files in buffer
nmap <c-R> :CtrlPBufTag<cr>
"search recent used files
nmap <c-E> :CtrlPMRUFiles<cr>


"/
"/ NERDTree
"/
let NERDTreeHijackNetrw = 0


"/
"/ Airline
"/
colorscheme nord 
let g:airline#extensions#tabline#enable = 1
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline_theme='base16_grayscale'

"/
"/ Syntastic
"/
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" let g:ycm_server_python_interpreter = '/usr/bin/python'

"/
"/ ale
"/
let g:ale_fixers = {
\   'javascript': ['eslint'],
\}
let g:ale_fix_on_save = 1


"/
"/ Coc
"/
set hidden
set nobackup
set cmdheight=2
set nowritebackup
set updatetime=300
set shortmess+=c
set signcolumn
" Use tab for trigger completion with characters ahead and navigate.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')
" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

"-------Auto-Commands------"

"Automaticaly source the Vimrc file on save
augroup autosourcing
	autocmd!
	autocmd BufwritePost .vimrc source %
augroup END

"Add simple  highlight to removal
nmap <Leader><space> :nohlsearch<cr>
